from aiogram import Router, types, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext

from keyboards import cancel_kb, login_kb, main_menu_kb
from utils.assistants import get_token
from utils.sql import add_token
from states import LoginStateGroup


router = Router()


@router.message(Text('–í–æ–π—Ç–∏'))
async def login(message: types.Message, state: FSMContext):
    await state.set_state(LoginStateGroup.username)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω!', reply_markup=cancel_kb.get())


@router.message(Text('–û—Ç–º–µ–Ω–∏—Ç—å'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n –ú–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏!')


@router.message(LoginStateGroup.username, F.text, lambda message: message.text.isnumeric() and len(message.text) == 10)
async def username_login(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await state.set_state(LoginStateGroup.password)
    await message.answer('–û—Ç–ª–∏—á–Ω–æüòä\n–¢–µ–ø–µ—Ä—å –ø–∞—Ä–æ–ª—å')


@router.message(LoginStateGroup.username)
async def username_login_error(message: types.Message):
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫–Ω–æ—Å—Ç—å –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö')


@router.message(LoginStateGroup.password, F.text, lambda message: message.text.isnumeric() and len(message.text) == 10)
async def password_login(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    try:
        token = await get_token(data['username'], data['password'])
        await add_token(message.from_user.id, token)
        await state.set_state(LoginStateGroup.login)
        await state.set_data({})
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—Éü•≥\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!', reply_markup=login_kb.get())
    except ValueError:
        await state.clear()
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ü§ï\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ!',
                             reply_markup=main_menu_kb.get())


@router.message(LoginStateGroup.password)
async def password_login_error(message: types.Message):
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫–Ω–æ—Å—Ç—å –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
